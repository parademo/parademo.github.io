<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>poker1</title>
    <url>/2025/04/28/poker/</url>
    <content><![CDATA[<ul>
<li>问题：一副 $52$ 张的扑克牌，两个人提前制定一套策略，使得随机从其中拿出 $5$ 张牌，一人选择 $4$ 张并设计展示顺序，要确保另一人猜出未展示的那一张牌。</li>
</ul>
<span id="more"></span>

<p>解法：因为要确定一张牌，花色较好决定，$5$ 张中至少有两张相同花色，选择其中一张保留，将另一张第一个展示代表为展示的花色，接下来就是通过剩下的三张牌确定为展示的大小。</p>
<p>会发现非常难记录。仔细思考其中未被发掘的性质，两张扑克牌之间的距离一定在 $6$ 以内，因为可以将 $1,2…k$ 看作一个环。设相同花色的两张牌为 $x, y$，且满足 $x + p &#x3D; y {\pmod {13}} \ p \leq 6$, 此时我们展示 $x$, 用最后 $3$ 张牌的大小排列顺序来代表 $p$ 的值，这样就间接的确定了 $y$ 的值。</p>
]]></content>
      <categories>
        <category>magic</category>
      </categories>
      <tags>
        <tag>信息论</tag>
      </tags>
  </entry>
  <entry>
    <title>百万级别 $n$ 皇后</title>
    <url>/2025/05/19/%E7%99%BE%E4%B8%87%E7%BA%A7%E5%88%ABn%E7%9A%87%E5%90%8E/</url>
    <content><![CDATA[<p>求 $n$ 皇后的一组解，$n \le 4 \times 10^6$。</p>
<span id="more"></span>

<h2 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h2><p>采用 Swap 策略。每次取出一个产生冲突的皇后，随机一个皇后，类似爬山算法，如果交换后权重函数变小则交换。</p>
<h2 id="实现细节-优化"><a href="#实现细节-优化" class="headerlink" title="实现细节 &amp; 优化"></a>实现细节 &amp; 优化</h2><h3 id="朴素版本"><a href="#朴素版本" class="headerlink" title="朴素版本"></a>朴素版本</h3><p>我们随机生成一个排列，行坐标为下标，列坐标为值。此时皇后冲突只用考虑对角线。<br>在不考虑任何优化的情况下，可以完成 $10^4$ 级别数据。</p>
<h3 id="初始情况生成"><a href="#初始情况生成" class="headerlink" title="初始情况生成"></a>初始情况生成</h3><p>在纯随机的情况下，初始权重函数值较大，而我们每一次交换只能减少常数的权重函数。</p>
<p>因此，降低初始权重函数值，就可以降低需要的有效交换次数。</p>
<p>具体如何生成？依次遍历行，用随机的方法找到一列不会产生冲突。生成若干个无冲突位置后，剩下的位置任意随机摆放。</p>
<p>优化后大致可处理 $2 \times 10^5$ 级别数据。</p>
<h3 id="权重函数"><a href="#权重函数" class="headerlink" title="权重函数"></a>权重函数</h3><p>状态的复制是 $O(n)$ 级别的，这大大限制了有效交换次数。这里我们希望状态的复制变为 $O(1)$，其中最关键的是求解交换后的权重函数，以及冲突相关内容的更新。以下是需要维护的信息：</p>
<ul>
<li>每条对角线上皇后个数 $s_1, s_2$</li>
<li>权重函数：$S &#x3D; \sum_i \binom{s_1(i)}{2} + \binom{s_2(i)}{2}$</li>
<li>冲突集合中皇后的下标集合 $conflicts$</li>
</ul>
<p>由于每一次交换只会影响常数个 $s_1,s_2$，因此前两条可以在 $O(1)$ 时间内更新。对于第三条，考虑到冲突皇后的数量较小，我们用 conflicts 维护可能在冲突范围中的皇后，不是就继续随机就行了，当混入大量不冲突的皇后就重构。</p>
<h3 id="参数选择"><a href="#参数选择" class="headerlink" title="参数选择"></a>参数选择</h3><p>以 $n &#x3D; 4000000$ 为例：</p>
<blockquote>
<p>初始冲突皇后数 100<br>失败 5 次后重构 conflicts<br>max_iter &#x3D; 10</p>
</blockquote>
<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ll n = <span class="number">4000000</span>;</span><br><span class="line">ll s1[<span class="number">2</span>*n], s2[<span class="number">2</span>*n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; conflict_rows; </span><br><span class="line">    <span class="built_in">State</span>() &#123;</span><br><span class="line">        p.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i] = i;</span><br><span class="line">        conflict_rows.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Rand</span><span class="params">(ll m = n - <span class="number">100</span>)</span> </span>&#123;</span><br><span class="line">        conflict_rows.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="function">default_random_engine <span class="title">e</span><span class="params">(rand())</span></span>;</span><br><span class="line">        <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">0</span>, n - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(i, n - <span class="number">1</span>)</span></span>;</span><br><span class="line">            ll j = <span class="built_in">dis</span>(e);</span><br><span class="line">            <span class="keyword">while</span>(s1[i+p[j]] || s2[i+n-p[j]]) j = <span class="built_in">dis</span>(e);</span><br><span class="line">            <span class="built_in">swap</span>(p[i], p[j]);</span><br><span class="line">            s1[i+p[i]]++, s2[i+n-p[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shuffle</span>(p.<span class="built_in">begin</span>() + m, p.<span class="built_in">end</span>(), e);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m; i &lt; n; ++i) &#123;</span><br><span class="line">            s1[i+p[i]]++, s2[i+n-p[i]]++;</span><br><span class="line">            conflict_rows.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Conflicts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            ans += (s1[i] * (s1[i] - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">            ans += (s2[i] * (s2[i] - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update_conflict_rows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : conflict_rows) <span class="keyword">if</span>(s1[i+p[i]] &gt; <span class="number">1</span> || s2[i+n-p[i]] &gt; <span class="number">1</span>) tmp.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="built_in">swap</span>(tmp, conflict_rows);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">delta</span><span class="params">(ll i, ll j)</span> </span>&#123;</span><br><span class="line">        ll x = p[i], y = p[j];</span><br><span class="line">        ll delta = <span class="number">0</span>;</span><br><span class="line">        delta += <span class="number">1</span> - s1[i+x];</span><br><span class="line">        delta += <span class="number">1</span> - s2[i+n-x];</span><br><span class="line">        delta += <span class="number">1</span> - s1[j+y];</span><br><span class="line">        delta += <span class="number">1</span> - s2[j+n-y];</span><br><span class="line">        </span><br><span class="line">        delta += s1[j+x];</span><br><span class="line">        delta += s2[j+n-x];</span><br><span class="line">        delta += s1[i+y];</span><br><span class="line">        delta += s2[i+n-y];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i + x == j + y || i - x == j - y) delta -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Chk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Conflicts</span>() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Chk2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) s1[i] = s2[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            s1[i+p[i]]++;</span><br><span class="line">            s2[i+n-p[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i+p[i]] &gt; <span class="number">1</span> || s2[i+n-p[i]] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">std::ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;map.out&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::string s;</span><br><span class="line">            <span class="type">int</span> x = p[i];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123; s += <span class="string">&#x27;-&#x27;</span>; x = -x; &#125;</span><br><span class="line">            std::string num;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                num += <span class="built_in">char</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span>(x);</span><br><span class="line">            std::<span class="built_in">reverse</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>());</span><br><span class="line">            s += num;</span><br><span class="line">            fout &lt;&lt; s &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fout &lt;&lt; std::endl;</span><br><span class="line">        fout.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">State s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Search</span><span class="params">(ll round, <span class="type">time_t</span> t0)</span> </span>&#123;</span><br><span class="line">    s.<span class="built_in">Rand</span>();</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">(time(<span class="literal">NULL</span>))</span></span>;</span><br><span class="line">    uniform_int_distribution &lt;<span class="type">int</span>&gt; <span class="built_in">dis</span>(<span class="number">0</span>, n - <span class="number">1</span>); </span><br><span class="line">    ll Ans = s.<span class="built_in">Conflicts</span>(), Upper = <span class="number">1e6</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Initial Conflicts: &quot;</span> &lt;&lt; Ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span>(Ans &amp;&amp; Upper--) &#123;</span><br><span class="line">        ll times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ll i = s.conflict_rows[<span class="built_in">rand</span>() % s.conflict_rows.<span class="built_in">size</span>()];</span><br><span class="line">        <span class="keyword">while</span>(s1[i+s.p[i]] &lt;= <span class="number">1</span> &amp;&amp; s2[i+n-s.p[i]] &lt;= <span class="number">1</span> &amp;&amp; times &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            i = s.conflict_rows[<span class="built_in">rand</span>() % s.conflict_rows.<span class="built_in">size</span>()];</span><br><span class="line">            times++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(times == <span class="number">5</span>) &#123;</span><br><span class="line">            s.<span class="built_in">update_conflict_rows</span>();</span><br><span class="line">            i = s.conflict_rows[<span class="built_in">rand</span>() % s.conflict_rows.<span class="built_in">size</span>()];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ll j = <span class="built_in">dis</span>(e), delta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i == j || (delta = s.<span class="built_in">delta</span>(i, j)) &gt;= <span class="number">0</span>) j = <span class="built_in">dis</span>(e);</span><br><span class="line">        ll x = i, y = j;</span><br><span class="line">        s1[x+s.p[x]]--, s2[x+n-s.p[x]]--;</span><br><span class="line">        s1[y+s.p[y]]--, s2[y+n-s.p[y]]--;</span><br><span class="line">        <span class="built_in">swap</span>(s.p[x], s.p[y]);</span><br><span class="line">        s1[x+s.p[x]]++, s2[x+n-s.p[x]]++;</span><br><span class="line">        s1[y+s.p[y]]++, s2[y+n-s.p[y]]++;</span><br><span class="line">        Ans += delta;</span><br><span class="line">        <span class="keyword">if</span>((s1[x+s.p[x]] &gt; <span class="number">1</span> || s2[x+n-s.p[x]] &gt; <span class="number">1</span>) &amp;&amp; (s1[x+s.p[y]] &lt;= <span class="number">1</span> &amp;&amp; s2[x+n-s.p[y]] &lt;= <span class="number">1</span>)) s.conflict_rows.<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="keyword">if</span>((s1[y+s.p[y]] &gt; <span class="number">1</span> || s2[y+n-s.p[y]] &gt; <span class="number">1</span>) &amp;&amp; (s1[y+s.p[x]] &lt;= <span class="number">1</span> &amp;&amp; s2[y+n-s.p[x]] &lt;= <span class="number">1</span>)) s.conflict_rows.<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">Chk2</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Round &quot;</span> &lt;&lt; round &lt;&lt; <span class="string">&quot; success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Conflicts: &quot;</span> &lt;&lt; s.<span class="built_in">Conflicts</span>() &lt;&lt; endl;</span><br><span class="line">        s.<span class="built_in">Show</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Time used: &quot;</span> &lt;&lt; (<span class="built_in">time</span>(<span class="literal">nullptr</span>) - t0) &lt;&lt; <span class="string">&quot; s&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Round &quot;</span> &lt;&lt; round &lt;&lt; <span class="string">&quot; failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Conflicts: &quot;</span> &lt;&lt; s.<span class="built_in">Conflicts</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time used: &quot;</span> &lt;&lt; (<span class="built_in">time</span>(<span class="literal">nullptr</span>) - t0) &lt;&lt; <span class="string">&quot; s&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">(rand())</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> max_iter = <span class="number">10</span>;</span><br><span class="line">    <span class="type">time_t</span> t0 = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll t = <span class="number">1</span>; t &lt;= max_iter; ++t) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Round &quot;</span> &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">Search</span>(t, t0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>search</tag>
        <tag>random</tag>
      </tags>
  </entry>
</search>
